name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always
  CARGO_BUILD_JOBS: 2

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Homebrew
      uses: Homebrew/actions/setup-homebrew@main
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32v1-none

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-stellar-${{ hashFiles('**/Cargo.lock') }}-v1
        
    - name: Install Stellar CLI
      run: brew install stellar-cli
        
    - name: Build optimized contract
      run: stellar contract build

    - name: Deploy to Testnet
      id: deploy-testnet
      run: ./scripts/deploy-testnet.sh
      env:
        STELLAR_PRIVATE_KEY: ${{ secrets.STELLAR_TESTNET_PRIVATE_KEY }}
        
    - name: Create release archive
      run: |
        mkdir -p release-assets
        cp target/wasm32v1-none/release/tic_tac_toe.wasm release-assets/
        cp README.md release-assets/
        cp -r scripts release-assets/
        cp -r frontend release-assets/
        cp .contract-id-testnet release-assets/contract-id-testnet.txt
        tar -czf tic-tac-toe-${{ github.ref_name }}.tar.gz -C release-assets .
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          tic-tac-toe-${{ github.ref_name }}.tar.gz
          target/wasm32v1-none/release/tic_tac_toe.wasm
          .contract-id-testnet
        body: |
          ## Tic-Tac-Toe Smart Contract Release ${{ github.ref_name }}
          
          ### üåê Live Contract on Testnet
          **Contract ID**: `${{ steps.deploy-testnet.outputs.testnet_contract_id }}`  
          **Network**: Stellar Testnet  
          **Status**: ‚úÖ Deployed and ready to use  
          
          You can interact with this contract immediately on testnet using:
          ```bash
          stellar contract invoke \
            --id ${{ steps.deploy-testnet.outputs.testnet_contract_id }} \
            --source <your-account> \
            --network testnet \
            -- create_game \
            --player_x <player1> \
            --player_o <player2>
          ```
          
          ### Features
          - ‚úÖ Complete Tic-Tac-Toe game logic
          - ‚úÖ Multiple concurrent games support
          - ‚úÖ Comprehensive test coverage
          - ‚úÖ Live deployment on Stellar Testnet
          - ‚úÖ React frontend with wallet integration
          
          ### Files
          - `tic_tac_toe.wasm` - Compiled smart contract
          - `tic-tac-toe-${{ github.ref_name }}.tar.gz` - Complete release package with frontend
          - `.contract-id-testnet` - Testnet contract ID for easy reference
          
          ### Local Development
          1. Extract the release package
          2. Run `./scripts/setup-localnet.sh` to set up localnet
          3. Run `./scripts/deploy.sh` to deploy the contract locally
          4. Use `make frontend-dev` to start the web interface
          
          ### Frontend Usage
          The contract is ready to use with the included React frontend:
          1. Start frontend: `make frontend-dev`
          2. Select "Testnet" network
          3. Connect your Freighter wallet
          4. Create or join games using the testnet contract
          
          See README.md for detailed instructions.
        draft: false
        prerelease: false