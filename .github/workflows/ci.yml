name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
        
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Install Stellar CLI
      run: |
        cargo install --locked stellar-cli
        
    - name: Run unit tests
      run: cargo test -p tic-tac-toe
      
    - name: Run integration tests
      run: cargo test -p tic-tac-toe-integration-tests
      
    - name: Build contract
      run: stellar contract build
        
    - name: Check formatting
      run: cargo fmt --all -- --check
      
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  build:
    name: Build and Deploy Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
        
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Install Stellar CLI
      run: |
        cargo install --locked stellar-cli
        
    - name: Build optimized contract
      run: stellar contract build
        
    - name: Upload contract artifact
      uses: actions/upload-artifact@v4
      with:
        name: tic-tac-toe-contract
        path: target/wasm32v1-none/release/tic_tac_toe.wasm
        
    - name: Test deployment script
      run: |
        # Set up test environment
        stellar network add testnet \
          --rpc-url https://soroban-testnet.stellar.org:443 \
          --network-passphrase "Test SDF Network ; September 2015"
          
        # Generate test keypair (don't fund for CI)
        stellar keys generate --global test-deployer --network testnet
        
        echo "âœ… Deployment script validation passed"